import json
import PySimpleGUI as sg
from datetime import datetime

agregarICO = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAACXBIWXMAAAsTAAALEwEAmpwYAAACLUlEQVR4nO2ZwU4UQRCGv+CCiciLKPHkRbgZ5YBRQ7K+hQHBB+AE6skTTwCcwUfRiLsh6g25KmKie6BNJf+Qdpyd7WGHnV7tL6lkd7s7Xf9WVU/3NCQSiVCmgFfAF8AFmPVbIkJeBgrwrQfcJjKO5NxcYP/X6t8FrhERThbKVeCdxmwxxkKMW8DPC6TksHYEvFBd1yLEeOil5ahts04hTTDvRWashZT6+88JOW4o36vYcYiQcbO/yBruED9z/1WNjAsuCYkMlyISGS5FJDJcikhkuBSRyHApIpHhYo7IJNAGdoAOcAr8AD4Bu8AToBW7kMfAYcBB6jPwIEYhE3pHlc3/HngG3ASmZfZ5FTiockIcNZmIX8BT4EpJX2tb1jvnqIRYOp1JxL2C9jfAfsHv9z0xlmaNCpn0asIiUUSZTytezbRCB10Gba8m+qWTK/HJnP+g9nbooMtgV/PZP9sPN8CnNbVvVxlUN13Nd6Okjxvg06zaP1YZVDcnmm/GK2wXaNkCMKPvp00K+ZYTYs6FCtnLCTlpUkhH89nDbtjU6lYZVDc7ms+e2P1wA3x6XlTs2a2TXaKMgiXNdzDE8tspWn79/c6obfkCQlbVdqiH6zlTEtPEfWBP2448+15h+yxojG1vHhEJ656Ylfx2I0dLkeiVXYY2yYb+XaeaWdOKdF02q8LOtiRnEmFHgOi4q5PgoDS0mogmnfphq9eilua3wFfguyJhS6ytTn8UdsZvcIb6yptP4cwAAAAASUVORK5CYII='
download2 = b''
historial = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAACXBIWXMAAAsTAAALEwEAmpwYAAABk0lEQVR4nO2Xu0pDQRCGPy9gZyXa6DNol85OrAUfwHewMG9goVgIWqURBLugIHaW4gV8CzWVeGmMaFwZmANLOIZczubsmvlgYXd2Tmb/7OwNjHRwkZae+XdCYsGZEGxGguAstbDUSiu13JDPCWdCsDUSBGfbL5ZaQXCWWlhqBcFZamGpFQQ3rLtWp76kLo3JChk2zoQQ14z0zcgIcQMu9jn1vSvgeXwTg5DbAoRcDyKkaHqN17W/CRn1GXnReLPafspZC2ITFrT9GtMVpaLfnGm7pu0NoOX5tdQm7KrtIiYhe/rNEvCpth1gDFgF7rVIXdgCfoAv708YSEgI1oAPjXsCTHl9Uj/SviawHvvJXgEeNfalZz9V2zOw3MsPliVkEXjQ2HJYZhynJGQFeNe458C01zcB7KeQWrLYm94GIAPPY1MX+3esi11mQOIdduG73c/2G7pkyOEm7RnPNgkcaJF6xrz6vsUopL09DtQ9e11tf/lHQ/vAqjmiqx38o6F9YI0cIY0O/qVTxAvxqmwRQiEvxF9AMDZiPtzeEgAAAABJRU5ErkJggg=='
icoEditar = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAACXBIWXMAAAsTAAALEwEAmpwYAAACA0lEQVR4nO3Zy0ocQRTG8b+bCILbIK7cBs0iSxdBMGQl0Rh7kZ2YJ/ARouaCF/CSTRZ5CNFFthJfQIgobjTvYCJqEk9oOAPF2D3WOHWqekJ/0Mww1Zzq31TRUzUNtyMGxxEwQOSI0XECDKaAhEoyjBhBjp3XgW6GPAQOY46MGEGIjRFDSFSMGEOiYSQCJApGIkHMMRIRYoqRyBAzjCSAmGAkESRPUIzlWus+q+b/AiIhOk4dqSGaekQCR+qppamnVuBIPbW6aGr1A32dFIgZKbiOF85a7C+wBzxpp0CKSNN1zAE3BUuYn8BjnwKpsg980/cZ8LvFemy3yhAKEOvAWcmoVBqSOYi3+tlQAabSkKwAQQlmp6qQzEEslJyzoe3nwEgVIZkHYkHbr/WWTNUgM3pxef/LHohXrYqlgvggFh3E9F0FU0B8EEvafgW89CkaG+IiVkIhYkN8EO8cxFQ7xWNBfBDvHcRkux3EgPggPjiI0ltsSoiLWC0556O2X94XYQ25C9GjC8MGYqKTzqwgo84vdv6NFyE2tf0CeN5ph1aQz1p3uwSxpe2/gGchOrSCnGrdP8CsNcIK8qhp/5Dvt98o4pODGKdCjwFEt6lu5gvOudE/DxpL8bGQiFCQxl67ka8tzs0RT+mC9OpdqHk0DoA1YJguyQPgO/AD+AK81meFQfMPrNyw3OmehugAAAAASUVORK5CYII='
icoEntrega = b'iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAYAAAA6/NlyAAAACXBIWXMAAAsTAAALEwEAmpwYAAAElklEQVR4nO2ae4hVVRTGf5qlohkJFimiGT0sES0kGC0iEHwUUmnkgywwFNEMpLJSS0iJSvARNvTQCat/EitmVJQS1D+yB0iIjxEVJU3s4YQlPUbnyIrvyOZyzr373rnn3nNnzgebYe7Zr+/sddZe69sbMmQoFYOBj4FDwLEylg0543QHvnKe23gfAQOpIK4HTgFBAqU1Z6zrgD8i6p0Arq0U4ac16G7gDmBIGcqtMYRD0mG9ocBe1Z1WKcLLNODSMvbZLQ/hXCxX3ZfpJIRfV91XSCHhAcBNnYVwF+BX4HRnIXyV6l306DMjnAfZCqfVpO3/h4DPgd+ATcAE/d6hTPoSsELOKyq6+knPOwzhwCkWCz8PDAMWAc0FQsuaImw4CvwJrAdGE7113Qc0AH8BB6lxwj2V8figh+rXNOEkkBFOGtkKd3STXlrpfLTahAcDqyutK1WTcLWREe7oqPgKdwEeBOqBrcp6FgP900R4pETu/RHi9xFgBzDJY7AxwHcxWc+/wNtAH6pMeI5y0kIiuAX6cbhFKxnWPa0BxwGPAZ8qDbRnZ6Rdd60G4TGaSBuwDqiLEMFv06RHxZwyrNTqBcpoXgV6xVjRHuelfAvcW2ayJhRsdFLNNyXOX0GTHr5VZMdXA89KmQiT+A0e36l931OV1Ad60Q2eUm2hfidH5M8B8J+s+H+06EcLFnwxIafjnVq9YtBLpve3+jgPvABcQ/G43zlesXIYmAc8LMfZpgUxa75SyRfznTbNno4sH4ZIw3L7nOjZ9i6g0Wl7RitpZu0iPHppLIVwg+qvlVmXC2OBA858mnQqEYV+wIeOozXrWBLjN1A/gUT/kgnPpPywF/ic85mdzXU4whvONrdGLyAf+qeVcIgbgO0a50DEd21b4Gv664OV6mtLWgmH+tVxjTW9HX2843jqujQTNizQWJ+U0PZ2YJ/a/wNMCR8kTTjXYxaD8RprV5HtnpT0Gygsvtt9mCThB2RKexWk3FjkxCe724kHeutCS8hpY9Q9jyQJj3I8bnhqsA2YockVQhgFvuhRd4QCjjC8fSquYtImbcL548CXTrxt5YK+zYkR+3lXxePhHmteOx/mORHbj7pIE4tKOq2+wGzd7mlzxrb98QOZveXN3zvxucXdcbDEZbPTzzp55rwIquSlB+mwbH9MKvoL8Gie9rbFnFTdFmVzXghSsC0N14lhvdTOGXnCRDP3l+QPbB7fFJn4kAbCvugnpxemlatLya6CGiFsGtnPjrnbHl0SgpQT7qa4+ZKTe7dLDAxSTHigIwm1irjdGiANhHvozZvUUg48ApzTWCdjbgdUlfAOJ1BvVnpXr63nCYl1PqGl3Yx915nXF9q/SRvhZZJYggLlgnLcJqkmCxXszxLR350XN7+MFlMy4TA4t0nGhZJ3SuibKzX0M+AHR+EsVL6WXpUIWjTIzZ71d6u+KYKloI8CjUnKd1cprFwv1dKuKyWKRhEwGaQQ7pG3bPXQkVKLOql/Frm8J+029+RhmMwzNEmTTWoazzixaaGy1ScjqQUMB95XPpl7enhYRKcneACWIQPtx2VPLkCT6dGE1QAAAABJRU5ErkJggg=='
icoStock = b'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAABL0lEQVR4nO2YUQ6EIAxE5/7HWsO5Zv82WQSliBXLvKQfkqWWoa2wgBBCCCGEEEckADTahkCw08LAbEHW59dDCYDiDtdSno49I3n0IWYL3Aov+zzUM1z6EI3OPEumNlcCYMIM4EnPCCvA1tgzwgrQ+/ueE+gtXwQ+JMCoxZuzITm/0JrGo8areCs+rQC9ziUAlAEYUTKvLwFGFIANwedj1ufW8atCVilNKJ3mSqc6DwEssRz5qWKecDL/bKeG7VxjPOMn3HQXCCPAGdaatiIB8JIMyFkuA3IkAJQBcCmB1NCJo9nfP0Rc1IbX2luQAKhkABezpttVVCvdGn/kCu0Uu8j0/jl7gHf75+wB3u2fswc42n+aoCl5m06CRykTnd16KQGwpP3QSVAIIYQQQmAtvhYQMe5z65YuAAAAAElFTkSuQmCC'

def pantalla_carga():
    layout = [
            [sg.Text("Sistema de Gestion de Inventario", size=(30, 2), justification='center')],        
            [sg.Text("Cargando datos, por favor espera...", size=(30, 1), justification='center')],
            [sg.ProgressBar(100, orientation='h', size=(30, 20), key='progressbar')],
            [sg.Cancel()]
            ]

    window = sg.Window('Cargando...', layout, finalize=True, element_justification='center')
    progress_bar = window['progressbar']

    for i in range(30):
        event, values = window.read(timeout=30)

        if event == sg.WIN_CLOSED or event == 'Cancel':
            break

        progress_bar.update_bar(i + 1)

    window.close()


def cargar_base_datos():
    try:
        with open('base_datos.json', 'r') as archivo:
            return json.load(archivo)
    except FileNotFoundError:
        return {}

def cargar_historial():
    try:
        with open('historial.json', 'r') as archivo:
            return json.load(archivo)
    except FileNotFoundError:
        return []

def guardar_historial(entrega):
    historial = cargar_historial()
    historial.append(entrega)
    with open('historial.json', 'w') as archivo:
        json.dump(historial, archivo, indent=2)

def guardar_base_datos(base_datos):
    with open('base_datos.json', 'w') as archivo:
        json.dump(base_datos, archivo, indent=2)

def validar_campos_vacios(values, campos):
    for campo in campos:
        if values[campo] == '':
            sg.popup_error(f"¡Error! El campo '{campo}' no puede estar vacío.")
            return False
    return True

def agregar_insumo_nueva_ventana():
    layout = [
        [sg.Text("Nombre del insumo:"), sg.InputText(key='-NOMBRE-')],
        [sg.Text("Cantidad:"), sg.InputText(key='-CANTIDAD-')],
        [sg.Text(size=(40, 5), key='-OUTPUT-')],
        [sg.Button("Agregar insumo"), sg.Button("Cancelar",button_color=('white', 'red'))],
    ]

    window = sg.Window("Agregar Insumo", layout)

    while True:
        event, values = window.read()

        if event == sg.WIN_CLOSED or event == "Cancelar":
            window.close()
            return None

        if event == "Agregar insumo":
            nombre = values['-NOMBRE-']
            cantidad = values['-CANTIDAD-']

            if not validar_campos_vacios(values, ['-NOMBRE-', '-CANTIDAD-']):
                continue

            window.close()
            return nombre, int(cantidad)

def realizar_entrega_nueva_ventana():
    layout = [
        [sg.Column([
                    [sg.Text("Nombre del insumo:"), sg.InputText(key='-NOMBRE-')],
                    [sg.Text("Cantidad:"), sg.InputText(key='-CANTIDAD-')],
                    [sg.Text("Destinatario:"), sg.InputText(key='-DESTINATARIO-')],
                    [sg.Text("Fecha (DD/MM/YYYY):"), sg.InputText(key='-FECHA-')],
                    [sg.Checkbox("Fecha Actual", key='-FECHA-ACTUAL-', enable_events=True)]
                    ], vertical_alignment='center')],
        [sg.Text(size=(40, 5), key='-OUTPUT-')],
        [sg.Button("Buscar Insumo"), sg.Button("Realizar entrega"), sg.Button("Cancelar", button_color=('white', 'red'))],
    ]

    window = sg.Window("Realizar Entrega", layout)

    while True:
        event, values = window.read()

        if event == sg.WIN_CLOSED or event == "Cancelar":
            window.close()
            return None

        if event == "Buscar Insumo":
            nombre_buscado = values['-NOMBRE-']
            base_datos = cargar_base_datos()

            resultados_coincidentes = [insumo for insumo in base_datos.keys() if nombre_buscado.lower() in insumo.lower()]

            if not resultados_coincidentes:
                sg.popup_error(f"No se encontraron insumos que coincidan con: {nombre_buscado}")
            else:
                layout_resultados = [
                    [sg.Text("Selecciona el insumo:")],
                    [sg.Listbox(resultados_coincidentes, size=(90, 20) ,key='-LISTA-')], #
                    [sg.Text(size=(40, 5), key='-OUTPUT-')],
                    [sg.Button("Seleccionar")]
                ]

                sub_window_resultados = sg.Window("Resultados de la Búsqueda", layout_resultados)

                while True:
                    event_resultados, values_resultados = sub_window_resultados.read()

                    if event_resultados == sg.WIN_CLOSED:
                        sub_window_resultados.close()
                        break

                    if event_resultados == "Seleccionar":
                        seleccion = values_resultados['-LISTA-']

                        if not seleccion:
                            sg.popup_error("¡Error! Debes seleccionar un insumo.")
                            continue

                        sub_window_resultados.close()
                        window['-NOMBRE-'].update(seleccion[0])
                        break

        if values['-FECHA-ACTUAL-']:
            fecha_actual = datetime.now().strftime('%d/%m/%Y')
            window['-FECHA-'].update(fecha_actual)

        if event == "Realizar entrega":
            nombre = values['-NOMBRE-']
            cantidad = values['-CANTIDAD-']
            destinatario = values['-DESTINATARIO-']
            fecha = values['-FECHA-']

            if not validar_campos_vacios(values, ['-NOMBRE-', '-CANTIDAD-', '-DESTINATARIO-', '-FECHA-']):
                continue

            try:
                fecha_entrega = datetime.strptime(fecha, '%d/%m/%Y')
            except ValueError:
                sg.popup_error("¡Error! El formato de fecha ingresado es incorrecto. Utilice DD/MM/YYYY.")
                continue

            window.close()
            return nombre, int(cantidad), destinatario, fecha_entrega

def agregar_insumo(window):
    nombre_cantidad = agregar_insumo_nueva_ventana()

    if nombre_cantidad is not None:
        nombre, cantidad = nombre_cantidad
        base_datos = cargar_base_datos()

        if nombre in base_datos:
            base_datos[nombre] += cantidad
        else:
            base_datos[nombre] = cantidad

        guardar_base_datos(base_datos)
        window['-OUTPUT-'].update(f"Insumo {nombre} agregado correctamente.")

def realizar_entrega(window):
    entrega_info = realizar_entrega_nueva_ventana()

    if entrega_info is not None:
        nombre, cantidad, destinatario, fecha_entrega = entrega_info
        base_datos = cargar_base_datos()

        if nombre in base_datos and base_datos[nombre] >= cantidad:
            base_datos[nombre] -= cantidad
            guardar_base_datos(base_datos)
            entrega = {'Nombre': nombre, 'Cantidad': cantidad, 'Destinatario': destinatario, 'Fecha': fecha_entrega.strftime('%d/%m/%Y')}
            guardar_historial(entrega)
            window['-OUTPUT-'].update(f"Entrega de {cantidad} unidades de {nombre} a {destinatario} realizada el {fecha_entrega.strftime('%d/%m/%Y')} correctamente.")
        else:
            window['-OUTPUT-'].update(f"No hay suficientes unidades de {nombre} en el stock para realizar la entrega.")

def mostrar_stock_nueva_ventana(filtro_producto=None):
    base_datos = cargar_base_datos()

    if not base_datos:
        sg.popup("La base de datos de stock está vacía.")
    else:
        if filtro_producto:
            # Usa una comprensión de lista para filtrar según el filtro de producto proporcionado
            base_datos_filtrada = {insumo: cantidad for insumo, cantidad in base_datos.items() if filtro_producto.lower() in insumo.lower()}
        else:
            base_datos_filtrada = base_datos

        if not base_datos_filtrada:
            sg.popup(f"No hay insumos para el producto '{filtro_producto}'.")
        else:
            layout = [
                [sg.Text("Stock actual:")],
                #[sg.Multiline("\n".join([f"{insumo}: {cantidad}" for insumo, cantidad in base_datos_filtrada.items()]), size=(90, 20), key='-STOCK-')],
                [sg.Multiline("", size=(90, 20), key='-STOCK-', font=('Arial', 12))],  # Se inicializa vacío para ser llenado en el bucle
                [sg.Text(size=(40, 5), key='-OUTPUT-')],
                [sg.Button("Copiar"), sg.Button("Cerrar",button_color=('white', 'red'))]
            ]

            #window_stock = sg.Window("Stock Actual", layout)

            window_stock = sg.Window("Stock Actual", layout, finalize=True)

            multiline_elem = window_stock['-STOCK-']

            for insumo, cantidad in base_datos_filtrada.items():
                color = 'red' if cantidad == 0 else 'DarkGoldenrod4' if cantidad == 1 else 'black' #RoyalBlue2
                font = ('font_bold', 13) if cantidad == 0 else ('Arial', 13)
                multiline_elem.print(f"{insumo}: {cantidad}", text_color=color, font=font)

            while True:
                event_stock, values_stock = window_stock.read()

                if event_stock == sg.WIN_CLOSED or event_stock == "Cerrar":
                    window_stock.close()
                    break

                if event_stock == "Copiar":
                    sg.popup("¡Datos copiados al portapapeles!")
                    sg.clipboard_set("\n".join([f"{insumo}: {cantidad}" for insumo, cantidad in base_datos_filtrada.items()]))

def mostrar_historial_nueva_ventana(filtro_producto=None):
    historial = cargar_historial()

    if not historial:
        sg.popup("El historial de entregas está vacío.")
    else:
        if filtro_producto:
            historial_filtrado = [entrega for entrega in historial if filtro_producto.lower() in entrega['Nombre'].lower()]
        else:
            historial_filtrado = historial

        if not historial_filtrado:
            sg.popup(f"No hay entregas para el producto '{filtro_producto}'.")
        else:
            layout = [
                [sg.Text("Historial de Entregas:")],
                [sg.Multiline("\n".join([f"{entrega['Nombre']} - Cantidad: {entrega['Cantidad']}, Destinatario: {entrega['Destinatario']}, Fecha: {entrega['Fecha']}" for entrega in historial_filtrado]), size=(90, 20), key='-HISTORIAL-')],
                [sg.Text(size=(40, 5), key='-OUTPUT-')],
                [sg.Button("Copiar"), sg.Button("Cerrar", button_color=('white', 'red'))]
            ]

            window_historial = sg.Window("Historial de Entregas", layout)

            while True:
                event_historial, values_historial = window_historial.read()

                if event_historial == sg.WIN_CLOSED or event_historial == "Cerrar":
                    window_historial.close()
                    break

                if event_historial == "Copiar":
                    sg.popup("¡Datos copiados al portapapeles!")
                    sg.clipboard_set("\n".join([f"{entrega['Nombre']} - Cantidad: {entrega['Cantidad']}, Destinatario: {entrega['Destinatario']}, Fecha: {entrega['Fecha']}" for entrega in historial_filtrado]))


def mostrar_stock(window):
    filtro_producto = sg.popup_get_text("Filtrar por producto (dejar en blanco para mostrar todo):", title="Filtrar Stock")
    mostrar_stock_nueva_ventana(filtro_producto)

def mostrar_historial():
    filtro_producto = sg.popup_get_text("Filtrar por producto (dejar en blanco para mostrar todo):", title="Filtrar Historial")
    mostrar_historial_nueva_ventana(filtro_producto)

#    historial = cargar_historial()

#    if not historial:
#        sg.popup("El historial de entregas está vacío.")
#    else:
#        historial_texto = "\n".join([f"{entrega['Nombre']} - Cantidad: {entrega['Cantidad']}, Destinatario: {entrega['Destinatario']}, Fecha: {entrega['Fecha']}" for entrega in historial])
#        sg.popup_scrolled("Historial de Entregas", historial_texto)

def buscar_insumo():
    layout = [
        [sg.Text("Nombre del insumo:"), sg.InputText(key='-BUSCAR-NOMBRE-')],
        [sg.Text(size=(40, 5), key='-OUTPUT-')],
        [sg.Button("Buscar"), sg.Button("Cancelar", button_color=('white', 'red'))] 
    ]

    window = sg.Window("Buscar Insumo", layout)

    while True:
        event, values = window.read()

        if event == sg.WIN_CLOSED or event == "Cancelar":
            window.close()
            return None

        if event == "Buscar":
            nombre_buscado = values['-BUSCAR-NOMBRE-']
            window.close()
            return nombre_buscado

def modificar_insumo(window, values):
    nombre_buscado = values['-BUSCAR-NOMBRE-']

    if not nombre_buscado:
        return

    base_datos = cargar_base_datos()

    resultados_coincidentes = [insumo for insumo in base_datos.keys() if nombre_buscado.lower() in insumo.lower()]

    if not resultados_coincidentes:
        window['-OUTPUT-'].update(f"No se encontraron insumos que coincidan con: {nombre_buscado}")
        return

    layout = [
        [sg.Text("Selecciona el insumo a modificar:")],
        [sg.Listbox(resultados_coincidentes, size=(90,20), key='-LISTA-')], #len(resultados_coincidentes)
        [sg.Text(size=(40, 5), key='-OUTPUT-')],
        [sg.Button("Seleccionar"), sg.Button("Cancelar", button_color=('white', 'red'))]
    ]

    sub_window = sg.Window("Resultados de la Búsqueda", layout)

    while True:
        event, values = sub_window.read()

        if event == sg.WIN_CLOSED or event == "Cancelar":
            sub_window.close()
            return

        if event == "Seleccionar":
            seleccion = values['-LISTA-']

            if not seleccion:
                sg.popup_error("¡Error! Debes seleccionar un insumo.")
                continue

            sub_window.close()
            insumo_seleccionado = seleccion[0]
            modificar_cantidad_insumo(window, base_datos, insumo_seleccionado)

def modificar_cantidad_insumo(window, base_datos, insumo_seleccionado):
    nombre_original = insumo_seleccionado
    layout = [
        [sg.Text(f"Modificar insumo: {nombre_original}")],
        [sg.Text("Nuevo nombre:"), sg.InputText(default_text=nombre_original, key='-NUEVO-NOMBRE-')],
        [sg.Text("Nueva cantidad:"), sg.InputText(default_text=base_datos[nombre_original], key='-NUEVA-CANTIDAD-')],
        [sg.Checkbox('Sumar a la cantidad existente', key='-SUMAR-ACTUAL-', default=False)],
        [sg.Text(size=(40, 5), key='-OUTPUT-')],
        [sg.Button("Guardar"), sg.Button("Cancelar", button_color=('white', 'red')), sg.Button("Borrar", button_color=('red', 'black'))]
    ]

    sub_window = sg.Window("Modificar Insumo", layout)

    while True:
        event, values = sub_window.read()

        if event == sg.WIN_CLOSED or event == "Cancelar":
            sub_window.close()
            return
        
        if event == "Guardar":
            nuevo_nombre = values['-NUEVO-NOMBRE-']
            nueva_cantidad = values.get('-NUEVA-CANTIDAD-', '')

            if not nuevo_nombre or not nueva_cantidad:
                sg.popup_error("¡Error! El nombre y la cantidad no pueden estar vacíos.")
                continue

            try:
                nueva_cantidad = int(nueva_cantidad)
            except ValueError:
                sg.popup_error("¡Error! La nueva cantidad debe ser un número entero.")
                continue

            if values['-SUMAR-ACTUAL-']:
                base_datos[nombre_original] += nueva_cantidad
            else:
                base_datos[nombre_original] = nueva_cantidad

            # Borrar el insumo original si el nombre cambió
            if nombre_original != nuevo_nombre:
                del base_datos[nombre_original]
                base_datos[nuevo_nombre] = base_datos.get(nuevo_nombre, 0) + nueva_cantidad

            # Actualizar la interfaz y guardar los cambios
            guardar_base_datos(base_datos)
            window['-OUTPUT-'].update(f"Insumo {nombre_original} modificado a {nuevo_nombre} correctamente. Nueva cantidad: {base_datos[nuevo_nombre]}.")
            sub_window.close()
            return
        
        if event == "Borrar":
            confirmar_borrado = sg.popup_yes_no(f"¿Estás seguro de que deseas borrar el insumo '{nombre_original}'?")
            if confirmar_borrado == 'Yes':
                del base_datos[nombre_original]
                guardar_base_datos(base_datos)
                window['-OUTPUT-'].update(f"Insumo {nombre_original} borrado correctamente.")
                sub_window.close()
                return
"""    
        if event == "Guardar":
            nuevo_nombre = values['-NUEVO-NOMBRE-']
            nueva_cantidad = values.get('-NUEVA-CANTIDAD-')

            if not nuevo_nombre or not nueva_cantidad:
                sg.popup_error("¡Error! El nombre y la cantidad no pueden estar vacíos.")
                continue

            try:
                nueva_cantidad = int(nueva_cantidad)
            except ValueError:
                sg.popup_error("¡Error! La nueva cantidad debe ser un número entero.")
                continue

            # Borrar el insumo original
            del base_datos[nombre_original]

            # Agregar el insumo modificado
            base_datos[nuevo_nombre] = nueva_cantidad

            # Actualizar la interfaz y guardar los cambios
            guardar_base_datos(base_datos)
            window['-OUTPUT-'].update(f"Insumo {nombre_original} modificado a {nuevo_nombre} correctamente. Nueva cantidad: {nueva_cantidad}.")
            sub_window.close()
            return
"""
def main():
    sg.theme('DarkTeal7')  # Cambiar el tema para un aspecto más atractivo
    layout = [
        [sg.Text("Sistema de Gestión de Stock y Entregas", font=("Helvetica", 20))],
        [sg.Image(data=download2)],
        [
            sg.Button('',image_data=agregarICO, image_size=(60, 60), border_width=0, key="Agregar Insumo"),
            sg.Text("Agregar Insumo", size=(17, 1)),
            sg.Button('',image_data=icoEntrega, image_size=(60, 60), border_width=0, key="Realizar Entrega"),
            sg.Text("Realizar Entrega", size=(17, 1)),
            sg.Button('',image_data=icoStock, image_size=(60, 60), border_width=0, key="Mostrar Stock"),
            sg.Text("Mostrar Stock", size=(17, 1)),
            sg.Button('',image_data=historial, image_size=(60, 60), border_width=0, key="Historial de Entregas"),
            sg.Text("Historial de Entregas", size=(17, 1)),
            sg.Button('',image_data=icoEditar, image_size=(60, 60), border_width=0, key="Buscar y Modificar"),
            sg.Text("Modificar, Borrar Stock", size=(17, 1)),
        ],

        [sg.Text(size=(40, 5), key='-OUTPUT-')],

        [sg.Button("Salir", size=(20, 2), button_color=('white', 'red'))],

        #[sg.Button(image_filename='C:/Users/Usuario/Desktop/Inv-Py/icoEntrega.png', image_size=(60, 60), border_width=0),
        # sg.Text("texto_boton", size=(30, 1))],
    ]

    window = sg.Window("Menú Principal", layout, element_justification='center',size=(1200, 700))

    pantalla_carga()

    while True:
        event, values = window.read()

        if event == sg.WIN_CLOSED or event == "Salir":
            break
        elif event == "Agregar Insumo":
            agregar_insumo(window)
        elif event == "Realizar Entrega":
            realizar_entrega(window)
        elif event == "Mostrar Stock":
            mostrar_stock(window)
        elif event == "Historial de Entregas":
            mostrar_historial()
        elif event == "Buscar y Modificar":
            nombre = buscar_insumo()
            if nombre:
                modificar_insumo(window, {'-BUSCAR-NOMBRE-': nombre})

    window.close()

if __name__ == "__main__":
    main()
